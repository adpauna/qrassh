#!/bin/bash
#Change the below to yes if you are using authbind to listen to port 22
AUTHBIND_ENABLED=no

# To override the default virtual enviroment, either set qrassh_VIRTUAL_ENV or
# activate it before starting qrassh
#qrassh_VIRTUAL_ENV=my-env

#Change the below to -n to disable daemonizing (for instance when using supervisor)
DAEMONIZE=""

################################################################################
## don't modify below here ##
################################################################################

# The default Python virtual environment is "qrassh-env". If you set the variable
# qrassh_VIRTUAL_ENV you can override this
DEFAULT_VIRTUAL_ENV=qrassh-env

find_qrassh_directory() {
    # Determine qrassh directory
    if [[ "$0" = /* ]]
    then
        qrasshDIR=$(dirname $0)/..
    else
        qrasshDIR=$(dirname $PWD/$0)/..
    fi
    qrasshDIR=$(cd ${qrasshDIR} && pwd -P 2>/dev/null || pwd)
}

activate_venv() {
    # Activate Python virtual environment
    VENV="$1"
    if [ ! -f "$VENV/bin/activate" ]
    then
        return 1
    fi
    . $VENV/bin/activate
    return 0
}

qrassh_status() {
    # Print status
    PID=$(cat ${PIDFILE} 2>/dev/null || echo "")
    if [ -n "$PID" ]; then
        if ps -p "$PID" 2>&1 >/dev/null; then
            echo "qrassh is running (PID: ${PID})."
        else
            echo "qrassh is not running (PID: ${PID})."
            echo "Removing stale PID file"
            rm -f ${PIDFILE}
        fi
    else
        echo "qrassh is not running."
    fi
}

qrassh_start() {
    # Start qrassh
    qrasshARGS="$*"
    TWISTEDARGS="${DAEMONIZE} ${XARGS} --umask 0022 --pidfile ${PIDFILE}"

    # For Docker log to stdout, for non-Docker log to file
    if [ "$DOCKER" = "yes" ]; then
        TWISTEDARGS="${TWISTEDARGS} -l -"
    else
        TWISTEDARGS="${TWISTEDARGS} -l log/qrassh.log"
    fi

    if [ ! -z "$VIRTUAL_ENV" ]; then
        echo 2>&1 "Using activated Python virtual environment \"$VIRTUAL_ENV\""
    elif activate_venv "$qrassh_VIRTUAL_ENV"; then
        echo 2>&1 "Using custom Python virtual environment \"$VIRTUAL_ENV\""
    elif activate_venv "$DEFAULT_VIRTUAL_ENV"; then
        echo 2>&1 "Using default Python virtual environment \"$VIRTUAL_ENV\""
    else
        echo 2>&1 "Not using Python virtual environment"
    fi

    echo "Starting qrassh: [twistd ${TWISTEDARGS} qrassh ${qrasshARGS}]..."
    if [ "$AUTHBIND_ENABLED" = "no" ]
    then
        twistd ${TWISTEDARGS} ${qrasshARGS} qrassh
    else
        authbind --deep twistd ${TWISTEDARGS} ${qrasshARGS} qrassh
    fi
}

qrassh_stop () {
    # Stop qrassh
    PID=$(cat ${PIDFILE} 2>/dev/null || echo "")
    if [ -n "$PID" ]; then
      echo "Stopping qrassh..."
      if kill -TERM $PID; then
          echo -n
      else
          echo "Removing stale PID file"
          rm -f ${PIDFILE}
      fi
    else
        echo "qrassh is not running."
    fi
}

qrassh_force_stop () {
    # Force Stop qrassh
    PID=$(cat ${PIDFILE} 2>/dev/null || echo -n "")
    if [ -n "$PID" ]; then
        echo -n "Stopping qrassh..."
        if kill -TERM $PID; then
            ((t = 60))
            while ((t > 1)); do
                sleep 1
                echo -n .
                if kill -0 $PID 2>/dev/null; then
                    ((t -= 1))
                else
                    echo "terminated."
                    return
                fi
            done
            kill -KILL $PID
            echo "killed."
        else
            echo "Removing stale PID file"
            rm -f ${PIDFILE}
        fi
    else
        echo "qrassh is not running."
    fi
}

qrassh_usage() {
    echo "usage: $0 <start|stop|force-stop|restart|status>"
}

################################################################################
## Main script
################################################################################

if [ "$#" = 0 ]
then
    qrassh_usage
    exit 1
fi

find_qrassh_directory $0
cd ${qrasshDIR}
export PYTHONPATH=${PYTHONPATH}:${qrasshDIR}
PIDFILE=var/run/qrassh.pid
set -e

key=$1
shift 1
case $key in
    stop)
        qrassh_stop $*
        ;;
    force-stop)
        qrassh_force_stop $*
        ;;
    start)
        qrassh_start $*
        ;;
    restart)
        qrassh_stop $*
        qrassh_start $*
        ;;
    status)
        qrassh_status $*
        ;;
    *)
        qrassh_usage
        exit 1
        ;;
esac
